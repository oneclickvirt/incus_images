name: Test Incus Images
on:
  schedule:
    - cron: '0 4 2-30/2 *'*
  workflow_dispatch:
jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.set-matrix.outputs.matrix }}
      x86_64_images: ${{ steps.set-matrix.outputs.x86_64_images }}
      arm64_images: ${{ steps.set-matrix.outputs.arm64_images }}
    
    steps:
    - uses: actions/checkout@v4
    
    - id: set-matrix
      run: |
        curl -o x86_64_all_images.txt https://raw.githubusercontent.com/oneclickvirt/incus_images/main/x86_64_all_images.txt
        curl -o arm64_all_images.txt https://raw.githubusercontent.com/oneclickvirt/incus_images/main/arm64_all_images.txt
        
        echo "构建测试矩阵..."
        matrix_json="{\"include\":["
        x86_64_images=""
        arm64_images=""
        
        while IFS= read -r image; do
          if [[ -n "$image" ]]; then
            matrix_json+="{\"image\":\"$image\",\"arch\":\"amd64\",\"runner\":\"ubuntu-latest\"},"
            x86_64_images+="$image"$'\n'
          fi
        done < x86_64_all_images.txt
        
        while IFS= read -r image; do
          if [[ -n "$image" ]]; then
            matrix_json+="{\"image\":\"$image\",\"arch\":\"arm64\",\"runner\":\"ubuntu-24.04-arm\"},"
            arm64_images+="$image"$'\n'
          fi
        done < arm64_all_images.txt
        
        matrix_json=${matrix_json%,}
        matrix_json+="]}"
        
        echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
        echo "x86_64_images<<EOF" >> $GITHUB_OUTPUT
        echo "$x86_64_images" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "arm64_images<<EOF" >> $GITHUB_OUTPUT
        echo "$arm64_images" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  test-single-image:
    needs: prepare-matrix
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix: ${{fromJson(needs.prepare-matrix.outputs.test-matrix)}}
    outputs:
      success_images: ${{ steps.record-success.outputs.success_images }}
    
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Fresh Environment
      run: |
        echo "设置新环境..."
        sudo apt update -y
        sudo sh -c 'export noninteractive=true && curl -L https://raw.githubusercontent.com/oneclickvirt/incus/main/scripts/incus_install.sh -o incus_install.sh && chmod +x incus_install.sh && bash incus_install.sh'
        
    - name: Configure Git
      run: |
        git config --global user.name "daily-test"
        git config --global user.email "test@spiritlhl.top"
        
    - name: Test Image
      id: test
      continue-on-error: true
      run: |
        echo "测试镜像: ${{ matrix.image }}"
        
        # 备份 DNS 解析文件
        sudo cp /etc/resolv.conf /etc/resolv.conf.backup
        
        if sudo bash test.sh "${{ matrix.image }}"; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "测试通过: ${{ matrix.image }}"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "测试失败: ${{ matrix.image }}"
        fi
        
        # 还原 DNS 配置
        sudo mv /etc/resolv.conf.backup /etc/resolv.conf || true

    - name: Record Success
      id: record-success
      if: steps.test.outputs.success == 'true'
      run: |
        echo "${{ matrix.image }}" >> /tmp/success_images.txt

  results-updater:
    needs: [test-single-image, prepare-matrix]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Update Results Based on Test Status
      run: |
        # 创建或清空固定镜像列表文件
        > x86_64_fixed_images.txt
        > arm64_fixed_images.txt
        
        # 遍历所有任务的状态
        success_jobs=$(echo '${{ toJSON(needs.test-single-image.result) }}' | jq -r 'to_entries[] | select(.value=="success") | .key')
        
        # 从原始镜像列表中提取对应的成功镜像
        x86_64_images=$(echo '${{ needs.prepare-matrix.outputs.x86_64_images }}')
        arm64_images=$(echo '${{ needs.prepare-matrix.outputs.arm64_images }}')
        
        for job in $success_jobs; do
          image=$(echo '${{ toJSON(needs.prepare-matrix.outputs.test-matrix) }}' | jq -r ".include[$job].image")
          if echo "$x86_64_images" | grep -q "^$image$"; then
            echo "$image" >> x86_64_fixed_images.txt
          elif echo "$arm64_images" | grep -q "^$image$"; then
            echo "$image" >> arm64_fixed_images.txt
          fi
        done
        
        # 去重并排序
        sort -u x86_64_fixed_images.txt -o x86_64_fixed_images.txt
        sort -u arm64_fixed_images.txt -o arm64_fixed_images.txt
        
    - name: Push Results
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ -f x86_64_fixed_images.txt && -f arm64_fixed_images.txt ]]; then
          echo "推送测试结果..."
          git pull origin main
          git add x86_64_fixed_images.txt arm64_fixed_images.txt
          git commit -m "更新镜像测试结果"
          git push
        fi
      continue-on-error: true

  cleanup:
    needs: results-updater
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Check Test Results
      run: |
        echo "所有测试完成"
        echo "查看 Actions 页面获取详细测试结果"
