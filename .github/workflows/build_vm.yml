name: Multi-Distro KVM Images Builder
on:
  schedule:
    - cron: "0 14 * * *"
  workflow_dispatch:
jobs:
  build-kvm-images:
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        distro:
          [
            "debian",
            "ubuntu",
            "fedora", # 无法编译
            "opensuse",
            "alpine",
            "archlinux",
            # "centos", # 无法编译
            "almalinux",
            "rockylinux",
            "oracle",
          ]
        arch:
          - name: amd64
            runner: ubuntu-latest
          - name: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.arch.runner }}
    timeout-minutes: 300
    steps:
      - uses: actions/checkout@v4
      - name: Check workspace
        run: pwd
      - name: Build environment
        run: |
          sudo apt update -y
          sudo apt install -y polkit || sudo apt install -y policykit-1
          sudo apt install -y jq btrfs-progs dosfstools qemu-kvm

      - name: Configure Git Identity
        run: |
          git config --global user.name "daily-update"
          git config --global user.email "tg@spiritlhl.top"
      
      # 添加GitHub CLI安装
      - name: Install GitHub CLI
        run: |
          sudo apt install -y gh

      - name: Build and Upload KVM Images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          DISTRO="${{ matrix.distro }}"
          ARCH="${{ matrix.arch.name }}"
          echo "Processing $DISTRO for $ARCH architecture"
          echo "---zip_name_list---"
          output=$(bash build_kvm_images.sh $DISTRO false $ARCH | tail -n 1)
          zip_name_list=($output)
          echo "---zip_name_list---"
          for item in "${zip_name_list[@]}"; do
            echo "$item"
          done
          echo "-------"
          
          # 检查或创建release
          if ! gh release view kvm_images >/dev/null 2>&1; then
            echo "Creating new release for kvm_images"
            gh release create kvm_images --title "KVM Images" --notes "Automated KVM image builds"
          fi
          
          echo "Building $DISTRO KVM images and packaging zips for $ARCH"
          sudo bash build_kvm_images.sh $DISTRO true $ARCH || true
          echo "------------"
          pwd
          ls
          echo "------------"

          # 检查GitHub Release文件大小限制（通常为2GB）
          MAX_FILE_SIZE=$((2 * 1024 * 1024 * 1024))  # 2GB in bytes
          
          for file in "${zip_name_list[@]}"; do
            if [ -f "$file" ]; then
              file_size=$(stat -c %s "$file")
              file_size_mb=$((file_size / 1024 / 1024))
              
              echo "Processing $file (size: $(numfmt --to=iec-i --suffix=B $file_size))"
              
              # 跳过过小的文件
              if [ $file_size -lt 10485760 ]; then
                echo "Skipping $file - size <10MB"
                rm -vf "$file"
                continue
              fi
              
              # 检查文件是否过大
              if [ $file_size -gt $MAX_FILE_SIZE ]; then
                echo "Warning: $file is too large for GitHub Release ($(numfmt --to=iec-i --suffix=B $file_size))"
                echo "Consider splitting or compressing the file further"
                rm -vf "$file"
                continue
              fi
              
              asset_name=$(basename "$file")
              
              # 删除已存在的asset
              echo "Checking for existing asset: $asset_name"
              if gh release view kvm_images --json assets --jq ".assets[].name" | grep -q "^$asset_name$"; then
                echo "Removing existing asset: $asset_name"
                gh release delete-asset kvm_images "$asset_name" --yes || true
                sleep 2  # 等待删除完成
              fi
              
              # 上传文件
              echo "Uploading $asset_name..."
              if gh release upload kvm_images "$file" --clobber; then
                echo "Successfully uploaded $asset_name"
              else
                echo "Failed to upload $asset_name"
                # 尝试使用curl作为备用方案
                echo "Attempting backup upload method..."
                upload_url="https://uploads.github.com/repos/oneclickvirt/incus_images/releases"
                release_id=$(gh release view kvm_images --json id --jq .id)
                
                if [ -n "$release_id" ] && [ "$release_id" != "null" ]; then
                  curl_response=$(curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" \
                    -H "Content-Type: application/zip" \
                    --data-binary @"$file" \
                    "$upload_url/$release_id/assets?name=$asset_name" || echo "curl_failed")
                  
                  if [ "$curl_response" != "curl_failed" ]; then
                    echo "Backup upload successful for $asset_name"
                  else
                    echo "Both upload methods failed for $asset_name"
                  fi
                fi
              fi
              
              # 清理文件
              sudo rm -vf "$file"
            else
              echo "File $file does not exist"
            fi
          done
        continue-on-error: true
