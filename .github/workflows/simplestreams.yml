name: Build incus Simplestreams

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */10 * *'

jobs:
  build-simplestreams:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install incus-simplestreams
      run: |
        sudo apt-get update
        sudo apt-get install -y golang git
        git clone https://github.com/lxc/incus
        cd incus/cmd/incus-simplestreams
        go build -o incus-simplestreams .
        sudo mv incus-simplestreams /usr/local/bin/
        incus-simplestreams --version
        incus-simplestreams --help

    - name: Download assets from GitHub Release
      run: |
        python3 <<EOF
        import requests, os, re, glob
        from datetime import datetime
        API_URL = "https://api.github.com/repos/oneclickvirt/incus_images/releases/tags/processed"
        OUTDIR = "build/spiritlhl"
        os.makedirs(OUTDIR, exist_ok=True)
        r = requests.get(API_URL)
        r.raise_for_status()
        assets = r.json().get("assets", [])
        seen_dirs = set()
        dt = datetime.now().strftime("%Y%m%d_%H%M")
        for a in assets:
            name = a["name"]
            url = a["browser_download_url"]
            m = re.match(r"([a-zA-Z0-9]+)-([^-]+)-([^-]+)-([^-]+)-(rootfs|incus)\.(squashfs|tar\.xz)", name)
            if not m: continue
            os_name, rel, arch, variant, t, ext = m.groups()
            local_dir = f"{OUTDIR}/{os_name}/{rel}/{arch}/{variant}/{dt}"
            os.makedirs(local_dir, exist_ok=True)
            local_file = f"{local_dir}/{name}"
            if not os.path.exists(local_file):
                print("Downloading", url)
                resp = requests.get(url, stream=True)
                with open(local_file, "wb") as f:
                    for chunk in resp.iter_content(8192):
                        f.write(chunk)
            if local_dir not in seen_dirs:
                meta_file = f"{local_dir}/meta.yaml"
                if not os.path.exists(meta_file):
                    with open(meta_file, "w") as mf:
                        mf.write(f"architecture: {arch}\n")
                        mf.write(f"os: {os_name}\n")
                        mf.write(f"release: {rel}\n")
                        mf.write(f"variant: {variant}\n")
                        mf.write(f"type: {t}\n")
                        mf.write(f"created_at: {dt}\n")
                seen_dirs.add(local_dir)
        for d, _, _ in os.walk(OUTDIR):
            for f in glob.glob(os.path.join(d, "*-rootfs.squashfs")):
                os.rename(f, os.path.join(d, "rootfs.squashfs"))
            for f in glob.glob(os.path.join(d, "*-incus.tar.xz")):
                os.rename(f, os.path.join(d, "incus.tar.xz"))
        EOF

    - name: Generate SHA256SUMS for images
      run: |
        find build/spiritlhl -type d | while read d; do
          cd "$d"
          files=""
          for f in rootfs.squashfs incus.tar.xz; do
            if [ -f "$f" ]; then
              files="$files $f"
            fi
          done
          if [ -n "$files" ]; then
            sha256sum $files > SHA256SUMS
            echo "Generated SHA256SUMS in $d"
          fi
          cd - >/dev/null
        done

    - name: Build simplestreams index (add all images)
      run: |
        set -e
        OUT_INDEX="build/simplestreams_index"
        mkdir -p "$OUT_INDEX"
        find build/spiritlhl -type f -name 'rootfs.squashfs' | while read -r squashfs; do
          d=$(dirname "$squashfs")
          meta="$d/meta.yaml"
          image="$d/incus.tar.xz"
          # 检查必需的文件是否存在
          if [ -f "$meta" ] && [ -f "$image" ]; then
            echo "Importing $d"
            incus-simplestreams add \
              "$image" \
              "$squashfs" \
              --output "$OUT_INDEX"
          else
            echo "Skip $d (missing files)"
          fi
        done
        echo "All images added."

    - name: Generate simplestreams metadata
      run: |
        OUT_INDEX="build/simplestreams_index"
        incus-simplestreams generate-metadata --output "$OUT_INDEX"
        echo "Metadata generated in $OUT_INDEX"

    - name: List build contents
      run: |
        echo "Build directory contents:"
        find build -type f | head -30

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
