name: Simplestreams 

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip curl

      - name: 获取所有 Releases 信息
        id: get_releases
        run: |
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases" > releases.json
          echo "data=$(cat releases.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: 创建或获取 processed Release ID
        id: get_processed_release
        run: |
          # 查询是否存在名为 processed 的 Release
          existing_release=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | select(.tag_name=="processed") | .id // empty')
          
          if [ -z "$existing_release" ]; then
            # 创建 processed Release
            echo "Creating new release 'processed'..."
            release_response=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"tag_name":"processed","name":"Processed Assets","draft":false,"prerelease":false}' \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            
            processed_id=$(echo "$release_response" | jq -r '.id')
            if [ "$processed_id" = "null" ] || [ -z "$processed_id" ]; then
              echo "Failed to create release"
              echo "$release_response"
              exit 1
            fi
          else
            echo "Found existing release 'processed': $existing_release"
            processed_id=$existing_release
          fi
          
          echo "release_id=$processed_id" >> $GITHUB_OUTPUT

      - name: 处理并上传解压文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p work
          cd work

          # 创建临时文件存储已处理的资产信息
          echo "[]" > processed_assets.json

          # 从文件读取 releases 数据而不是环境变量
          # 过滤掉 processed release 并提取需要处理的 assets
          cat ../releases.json | jq -r '
            .[] | 
            select(.tag_name != "processed") | 
            .assets[] | 
            select(.name | test("^[a-z0-9]+_[0-9a-z.-]+_[a-z0-9]+_[a-z0-9]+_[a-z]+\\.zip$")) |
            @base64
          ' > assets_to_process.txt

          # 处理每个符合条件的 asset
          while IFS= read -r encoded_asset; do
            if [ -z "$encoded_asset" ]; then
              continue
            fi
            
            asset=$(echo "$encoded_asset" | base64 -d)
            name=$(echo "$asset" | jq -r '.name')
            url=$(echo "$asset" | jq -r '.browser_download_url')

            echo "Processing $name"

            # 解析文件名
            if [[ "$name" =~ ^([a-z0-9]+)_([0-9a-z\.\-]+)_([a-z0-9]+)_([a-z0-9]+)_([a-z]+)\.zip$ ]]; then
              os="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              codename="${BASH_REMATCH[3]}"
              arch="${BASH_REMATCH[4]}"
              variant="${BASH_REMATCH[5]}"

              # 创建唯一的临时工作目录
              temp_dir="temp_${os}_${version}_${arch}_${variant}_$"
              mkdir -p "$temp_dir"
              cd "$temp_dir"

              # 下载并解压
              echo "Downloading $name..."
              if curl -L -o image.zip "$url" && unzip -q image.zip; then
                if [ -f rootfs.squashfs ] && [ -f incus.tar.xz ]; then
                  # 重命名文件
                  rootfs_file="${os}-${version}-${arch}-${variant}-rootfs.squashfs"
                  incus_file="${os}-${version}-${arch}-${variant}-incus.tar.xz"

                  mv rootfs.squashfs "$rootfs_file"
                  mv incus.tar.xz "$incus_file"

                  # 上传文件
                  echo "Uploading $rootfs_file..."
                  rootfs_response=$(curl -s -X POST \
                    -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Content-Type: application/octet-stream" \
                    --data-binary @"$rootfs_file" \
                    "https://uploads.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?name=$rootfs_file")

                  echo "Uploading $incus_file..."
                  incus_response=$(curl -s -X POST \
                    -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Content-Type: application/octet-stream" \
                    --data-binary @"$incus_file" \
                    "https://uploads.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?name=$incus_file")

                  # 检查上传是否成功
                  rootfs_url=$(echo "$rootfs_response" | jq -r '.browser_download_url // empty')
                  incus_url=$(echo "$incus_response" | jq -r '.browser_download_url // empty')

                  if [ -n "$rootfs_url" ] && [ -n "$incus_url" ]; then
                    echo "Successfully uploaded both files for $name"
                    
                    # 记录成功处理的资产
                    jq --arg os "$os" \
                       --arg version "$version" \
                       --arg arch "$arch" \
                       --arg variant "$variant" \
                       --arg rootfs_url "$rootfs_url" \
                       --arg incus_url "$incus_url" \
                       '. += [{
                         os: $os,
                         version: $version,
                         arch: $arch,
                         variant: $variant,
                         rootfs_url: $rootfs_url,
                         incus_url: $incus_url,
                         product_id: "\($os)-\($version)-\($arch)-\($variant)"
                       }]' ../processed_assets.json > ../processed_assets_temp.json
                    
                    mv ../processed_assets_temp.json ../processed_assets.json
                  else
                    echo "Failed to upload files for $name"
                    echo "Rootfs response: $rootfs_response"
                    echo "Incus response: $incus_response"
                  fi
                else
                  echo "Missing required files in $name"
                fi
              else
                echo "Failed to download or extract $name"
              fi

              # 清理临时目录
              cd ..
              rm -rf "$temp_dir"
            fi
          done < assets_to_process.txt

          # 将结果文件移动到根目录
          mv processed_assets.json /tmp/processed_assets.json

      - name: 生成 Simplestreams JSON
        run: |
          mkdir -p pages/images/streams/v1
          
          # 检查是否有已处理的资产
          if [ ! -f /tmp/processed_assets.json ] || [ "$(jq length /tmp/processed_assets.json)" -eq 0 ]; then
            echo "No processed assets found, creating empty structure"
            echo '{"index": {"images": {}}}' > pages/images/streams/v1/index.json
            echo '{"products": {}}' > pages/images/streams/v1/products.json
            exit 0
          fi

          # 生成 products.json
          jq -n --slurpfile assets /tmp/processed_assets.json '
            {
              products: (
                $assets[0]
                | group_by(.product_id)
                | map({
                    key: .[0].product_id,
                    value: {
                      versions: (
                        group_by(.version)
                        | map({
                            key: .[0].version,
                            value: {
                              items: (
                                group_by(.arch)
                                | map({
                                    key: .[0].arch,
                                    value: {
                                      rootfs: .[0].rootfs_url,
                                      incus: .[0].incus_url
                                    }
                                  })
                                | from_entries
                              )
                            }
                          })
                        | from_entries
                      )
                    }
                  })
                | from_entries
              )
            }
          ' > pages/images/streams/v1/products.json

          # 生成 index.json
          jq '{
            index: {
              images: (
                .products 
                | keys 
                | map({
                    key: .,
                    value: {product: .}
                  })
                | from_entries
              )
            }
          }' pages/images/streams/v1/products.json > pages/images/streams/v1/index.json

          echo "Generated Simplestreams JSON files:"
          echo "products.json:"
          cat pages/images/streams/v1/products.json | jq .
          echo "index.json:"
          cat pages/images/streams/v1/index.json | jq .

      - name: 生成网页界面
        run: |
          # 生成主页 index.html
          cat > pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Incus Images Repository</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                  h1 { color: #333; border-bottom: 2px solid #ddd; padding-bottom: 10px; }
                  h2 { color: #666; margin-top: 30px; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .image-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                  .image-card { border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
                  .image-card h3 { margin-top: 0; color: #333; }
                  .version-list { margin: 10px 0; }
                  .version-item { margin: 5px 0; padding: 5px; background: #f5f5f5; border-radius: 3px; }
                  .download-links { margin: 5px 0; }
                  .download-links a { margin-right: 10px; padding: 2px 8px; background: #007cba; color: white; text-decoration: none; border-radius: 3px; font-size: 12px; }
                  .download-links a:hover { background: #005a8b; }
                  .usage-section { background: #f9f9f9; padding: 20px; border-radius: 5px; margin: 20px 0; }
                  pre { background: #f4f4f4; padding: 10px; border-radius: 3px; overflow-x: auto; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Incus Images Repository</h1>
                  <p>本仓库提供各种 Linux 发行版的 Incus 容器镜像。</p>
                  
                  <div class="usage-section">
                      <h2>使用方法</h2>
                      <p>添加此镜像源到您的 Incus 配置：</p>
                      <pre>incus remote add local-images http://incusimages.spiritlhl.net --protocol=simplestreams --public</pre>
                      
                      <p>列出可用镜像：</p>
                      <pre>incus image list local-images:</pre>
                      
                      <p>使用镜像创建容器：</p>
                      <pre>incus launch local-images:PRODUCT_ID container-name</pre>
                  </div>
                  
                  <h2>可用镜像</h2>
                  <div id="images-container">
                      <p>加载中...</p>
                  </div>
              </div>
              
              <script>
                  async function loadImages() {
                      try {
                          const response = await fetch('./images/streams/v1/products.json');
                          const data = await response.json();
                          displayImages(data.products);
                      } catch (error) {
                          document.getElementById('images-container').innerHTML = '<p>加载镜像列表失败</p>';
                      }
                  }
                  
                  function displayImages(products) {
                      const container = document.getElementById('images-container');
                      
                      if (Object.keys(products).length === 0) {
                          container.innerHTML = '<p>暂无可用镜像</p>';
                          return;
                      }
                      
                      const imageCards = Object.entries(products).map(([productId, product]) => {
                          const versions = Object.entries(product.versions).map(([version, versionData]) => {
                              const architectures = Object.entries(versionData.items).map(([arch, files]) => {
                                  return `
                                      <div style="margin-left: 20px;">
                                          <strong>${arch}</strong>
                                          <div class="download-links">
                                              <a href="${files.rootfs}" download>rootfs</a>
                                              <a href="${files.incus}" download>metadata</a>
                                          </div>
                                      </div>
                                  `;
                              }).join('');
                              
                              return `
                                  <div class="version-item">
                                      <strong>版本: ${version}</strong>
                                      ${architectures}
                                  </div>
                              `;
                          }).join('');
                          
                          return `
                              <div class="image-card">
                                  <h3>${productId}</h3>
                                  <div class="version-list">
                                      ${versions}
                                  </div>
                              </div>
                          `;
                      }).join('');
                      
                      container.innerHTML = `<div class="image-grid">${imageCards}</div>`;
                  }
                  
                  loadImages();
              </script>
          </body>
          </html>
          EOF

      - name: 部署 GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pages
          publish_branch: gh-pages
          force_orphan: true
