name: simplestreams_pre_build

on:
  schedule:
      - cron: '0 18 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip curl

      - name: 获取所有 Releases 信息
        id: get_releases
        run: |
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases" > releases.json
          echo "data=$(cat releases.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: 创建或获取 processed Release ID
        id: get_processed_release
        run: |
          existing_release=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | select(.tag_name=="processed") | .id // empty')
          if [ -z "$existing_release" ]; then
            echo "Creating new release 'processed'..."
            release_response=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"tag_name":"processed","name":"Processed Assets","draft":false,"prerelease":false}' \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            processed_id=$(echo "$release_response" | jq -r '.id')
            if [ "$processed_id" = "null" ] || [ -z "$processed_id" ]; then
              echo "Failed to create release"
              echo "$release_response"
              exit 1
            fi
          else
            echo "Found existing release 'processed': $existing_release"
            processed_id=$existing_release
          fi
          echo "release_id=$processed_id" >> $GITHUB_OUTPUT

      - name: 预处理和删除现有文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p work
          cd work
          echo "[]" > files_to_upload.json
          cat ../releases.json | jq -r '
            .[] | 
            select(.tag_name != "processed") | 
            .assets[] | 
            select(.name | test("^[a-zA-Z0-9]+_[a-zA-Z0-9.\\-]+_[a-zA-Z0-9.\\-]+_[a-zA-Z0-9_\\-]+_[a-zA-Z0-9_\\-]+\\.zip$")) |
            @base64
          ' > assets_to_process.txt
          existing_assets=$(curl -s "https://api.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets")
          while IFS= read -r encoded_asset; do
            if [ -z "$encoded_asset" ]; then
              continue
            fi
            asset=$(echo "$encoded_asset" | base64 -d)
            name=$(echo "$asset" | jq -r '.name')
            url=$(echo "$asset" | jq -r '.browser_download_url')
            echo "Processing $name"
            if [[ "$name" =~ ^([a-zA-Z0-9]+)_([a-zA-Z0-9.\-]+)_([a-zA-Z0-9.\-]+)_([a-zA-Z0-9_\-]+)_([a-zA-Z0-9_\-]+)\.zip$ ]]; then
              os="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              codename="${BASH_REMATCH[3]}"
              arch="${BASH_REMATCH[4]}"
              variant="${BASH_REMATCH[5]}"
              # 新增标准化映射
              case "$arch" in
                x86_64) std_arch="amd64" ;;
                aarch64) std_arch="arm64" ;;
                *) std_arch="$arch" ;;
              esac
              rootfs_file="${os}-${version}-${std_arch}-${variant}-rootfs.squashfs"
              incus_file="${os}-${version}-${std_arch}-${variant}-incus.tar.xz"
              rootfs_asset_id=$(echo "$existing_assets" | jq -r --arg name "$rootfs_file" '.[] | select(.name == $name) | .id // empty')
              incus_asset_id=$(echo "$existing_assets" | jq -r --arg name "$incus_file" '.[] | select(.name == $name) | .id // empty')
              if [ -n "$rootfs_asset_id" ]; then
                sleep 3
                echo "Deleting existing $rootfs_file..."
                curl -s -X DELETE \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/$REPO/releases/assets/$rootfs_asset_id"
              fi
              if [ -n "$incus_asset_id" ]; then
                echo "Deleting existing $incus_file..."
                curl -s -X DELETE \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/$REPO/releases/assets/$incus_asset_id"
              fi
              sleep 3
              jq --arg name "$name" \
                 --arg url "$url" \
                 --arg os "$os" \
                 --arg version "$version" \
                 --arg arch "$arch" \
                 --arg std_arch "$std_arch" \
                 --arg variant "$variant" \
                 --arg rootfs_file "$rootfs_file" \
                 --arg incus_file "$incus_file" \
                 '. += [{
                   name: $name,
                   url: $url,
                   os: $os,
                   version: $version,
                   arch: $arch,
                   std_arch: $std_arch,
                   variant: $variant,
                   rootfs_file: $rootfs_file,
                   incus_file: $incus_file
                 }]' files_to_upload.json > files_to_upload_temp.json
              mv files_to_upload_temp.json files_to_upload.json
            fi
          done < assets_to_process.txt
          mv files_to_upload.json /tmp/files_to_upload.json

      - name: 等待API同步
        run: |
          echo "Waiting for GitHub API to sync after deletions..."
          sleep 360

      - name: 处理并上传解压文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p work
          cd work
          echo "[]" > processed_assets.json
          
          jq -r '.[] | @base64' /tmp/files_to_upload.json | while IFS= read -r encoded_file; do
            if [ -z "$encoded_file" ]; then
              continue
            fi
            file_info=$(echo "$encoded_file" | base64 -d)
            name=$(echo "$file_info" | jq -r '.name')
            url=$(echo "$file_info" | jq -r '.url')
            os=$(echo "$file_info" | jq -r '.os')
            version=$(echo "$file_info" | jq -r '.version')
            arch=$(echo "$file_info" | jq -r '.arch')
            std_arch=$(echo "$file_info" | jq -r '.std_arch')
            variant=$(echo "$file_info" | jq -r '.variant')
            rootfs_file=$(echo "$file_info" | jq -r '.rootfs_file')
            incus_file=$(echo "$file_info" | jq -r '.incus_file')
            
            temp_dir="temp_${os}_${version}_${arch}_${variant}_$$"
            mkdir -p "$temp_dir"
            cd "$temp_dir"
            
            echo "Downloading $name..."
            if curl -L -o image.zip "$url" && unzip -q image.zip; then
              if [ -f rootfs.squashfs ] && [ -f incus.tar.xz ]; then
                mv rootfs.squashfs "$rootfs_file"
                mv incus.tar.xz "$incus_file"
                
                rootfs_size=$(stat -c%s "$rootfs_file")
                incus_size=$(stat -c%s "$incus_file")
                rootfs_sha256=$(sha256sum "$rootfs_file" | cut -d' ' -f1)
                incus_sha256=$(sha256sum "$incus_file" | cut -d' ' -f1)
                combined_sha256=$(echo -n "${rootfs_sha256}${incus_sha256}" | sha256sum | cut -d' ' -f1)
                
                echo "Uploading $rootfs_file..."
                rootfs_response=$(curl -s -X POST \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$rootfs_file" \
                  "https://uploads.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?name=$rootfs_file")
                
                echo "Uploading $incus_file..."
                incus_response=$(curl -s -X POST \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$incus_file" \
                  "https://uploads.github.com/repos/$REPO/releases/$PROCESSED_RELEASE_ID/assets?name=$incus_file")
                
                rootfs_url=$(echo "$rootfs_response" | jq -r '.browser_download_url // empty')
                incus_url=$(echo "$incus_response" | jq -r '.browser_download_url // empty')
                
                if [ -n "$rootfs_url" ] && [ -n "$incus_url" ]; then
                  echo "Successfully uploaded both files for $name"
                  jq --arg os "$os" \
                     --arg version "$version" \
                     --arg arch "$arch" \
                     --arg std_arch "$std_arch" \
                     --arg variant "$variant" \
                     --arg rootfs_url "$rootfs_url" \
                     --arg incus_url "$incus_url" \
                     --arg rootfs_size "$rootfs_size" \
                     --arg incus_size "$incus_size" \
                     --arg rootfs_sha256 "$rootfs_sha256" \
                     --arg incus_sha256 "$incus_sha256" \
                     --arg combined_sha256 "$combined_sha256" \
                     '. += [{
                       os: $os,
                       version: $version,
                       arch: $arch,
                       std_arch: $std_arch,
                       variant: $variant,
                       rootfs_url: $rootfs_url,
                       incus_url: $incus_url,
                       rootfs_size: ($rootfs_size | tonumber),
                       incus_size: ($incus_size | tonumber),
                       rootfs_sha256: $rootfs_sha256,
                       incus_sha256: $incus_sha256,
                       combined_sha256: $combined_sha256
                     }]' ../processed_assets.json > ../processed_assets_temp.json
                  mv ../processed_assets_temp.json ../processed_assets.json
                else
                  echo "Failed to upload files for $name"
                  echo "Rootfs response: $rootfs_response"
                  echo "incus response: $incus_response"
                fi
              else
                echo "Missing required files in $name"
              fi
            else
              echo "Failed to download or extract $name"
            fi
            cd ..
            rm -rf "$temp_dir"
          done
          mv processed_assets.json /tmp/processed_assets.json
