name: Image Validation Pipeline

on:
  schedule:
    - cron: '0 16 * * *'
  workflow_dispatch:

jobs:
  image-validation:
    strategy:
      max-parallel: 1
      matrix:
        distro: ["kali", "centos", "almalinux", "rockylinux", 
                "fedora", "opensuse", "alpine", "archlinux", "gentoo", "openwrt", 
                "oracle", "openeuler", "ubuntu", "debian"]
        arch:
          - name: x86_64
            runner: ubuntu-latest
          - name: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.arch.runner }}
    timeout-minutes: 120
    
    steps:
    - name: Setup Environment
      run: |
        sudo apt update -y
        sudo apt install -y polkit || sudo apt install -y policykit-1
        sudo apt install -y jq
        sudo sh -c 'export noninteractive=true && curl -L https://raw.githubusercontent.com/oneclickvirt/incus/main/scripts/incus_install.sh -o incus_install.sh && chmod +x incus_install.sh && bash incus_install.sh'
        sudo usermod -aG lxd $USER
        incus admin init --storage-backend btrfs --storage-create-loop 10 --storage-pool default --auto 2>&1
        incus launch images:ubuntu/22.04

    - name: Fetch Image List
      env:
        ARCH: ${{ matrix.arch.name }}
        DISTRO: ${{ matrix.distro }}
      run: |
        FILE_URL="https://raw.githubusercontent.com/oneclickvirt/incus_images/main/${ARCH}_all_images.txt"
        ALT_URL="https://cdn.spiritlhl.net/https://raw.githubusercontent.com/oneclickvirt/incus_images/main/${ARCH}_all_images.txt"
        
        if ! curl -sSLk -m 20 -o images.txt "$FILE_URL"; then
          curl -sSLk -m 20 -o images.txt "$ALT_URL"
        fi
        
        # Filter images for specific distro
        grep "^${DISTRO}" images.txt > distro_images.txt || true

    - name: Image Processing
      env:
        ARCH: ${{ matrix.arch.name }}
        DISTRO: ${{ matrix.distro }}
      run: |
        set +e  # Disable error exit
        valid_images="${ARCH}_${DISTRO}_valid_images.txt"
        echo "Validation Report - $(date) - ${DISTRO}" > validation.log
        
        while read -r image; do
          echo "Processing $image..." | tee -a validation.log
          
          # Download and extract image
          if ! curl -m 600 -LO "https://github.com/oneclickvirt/incus_images/releases/download/${DISTRO}/$image"; then
            curl -m 600 -LO "https://cdn.spiritlhl.net/https://github.com/oneclickvirt/incus_images/releases/download/${DISTRO}/$image" || true
          fi
          
          unzip -q "$image" || true
          rm "$image" || true
          
          # Import image
          incus image import incus.tar.xz rootfs.squashfs --alias temp-image || true
          rm incus.tar.xz rootfs.squashfs || true
          
          # Container test
          incus init temp-image test-container || true
          incus start test-container || true
          sleep 10
          
          # SSH check
          if ! incus exec test-container -- lsof -i:22 | grep -q ssh; then
            echo "SSH check failed for $image" | tee -a validation.log
            continue
          fi
          
          # Network check
          incus exec test-container -- sh -c 'echo "nameserver 8.8.8.8" >> /etc/resolv.conf' || true
          if ! incus exec test-container -- curl -m 10 -sk https://cdn.spiritlhl.net/ok | grep -q success; then
            echo "Network check failed for $image" | tee -a validation.log
            continue
          fi
          
          # Reboot test
          incus restart test-container || true
          sleep 15
          if ! incus exec test-container -- curl -m 10 -sk https://cdn.spiritlhl.net/ok | grep -q success; then
            echo "Reboot test failed for $image" | tee -a validation.log
            continue
          fi
          
          echo "$image" >> "$valid_images"
          echo "Validation passed: $image" | tee -a validation.log
          
          # Cleanup
          incus delete -f test-container 2>/dev/null || true
          incus image delete temp-image 2>/dev/null || true
          
        done < distro_images.txt

    - name: Archive Results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.arch.name }}-${{ matrix.distro }}-validation
        path: |
          validation.log
          ${{ matrix.arch.name }}_${{ matrix.distro }}_valid_images.txt

  report-generation:
    needs: image-validation
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Generate Summary
      run: |
        mkdir -p report
        # Merge validation results
        find artifacts -name '*_valid_images.txt' -exec cat {} + | sort -u > report/validated_images.txt
        # Generate statistics report
        echo "# Validation Summary" > report/README.md
        echo "## Valid Images Count" >> report/README.md
        wc -l report/validated_images.txt | awk '{print "Total: "$1}' >> report/README.md
        echo "## Per Distribution and Architecture Results" >> report/README.md
        find artifacts -name 'validation.log' -exec sh -c 'echo "### {}"; cat {}' \; >> report/README.md
        
    - name: Publish Report
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./report
        keep_files: true

    - name: Update Repository
      run: |
        git config --global user.name "Image Validator"
        git config --global user.email "validator@incus"
        git pull
        git add .
        git commit -m "Update validation results [$(date +%Y%m%d)]" || true
        git push
