name: simplestreams_pre_build

on:
  schedule:
      - cron: '0 18 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 200
    
    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip curl gh
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: 获取所有 Releases 信息
        id: get_releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases" > releases.json
          echo "data=$(cat releases.json | jq -c .)" >> $GITHUB_OUTPUT
      - name: 创建或获取 processed Release
        id: get_processed_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh release view processed >/dev/null 2>&1; then
            echo "Creating new release 'processed'..."
            gh release create processed --title "Processed Assets" --notes "Automatically processed container assets"
            if [ $? -ne 0 ]; then
              echo "Failed to create release"
              exit 1
            fi
          else
            echo "Found existing release 'processed'"
          fi
          processed_id=$(gh release view processed --json id --jq .id)
          echo "release_id=$processed_id" >> $GITHUB_OUTPUT

      - name: 预处理和删除现有文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BLACKLIST_TAGS: "processed,kvm_images"
        run: |
          mkdir -p work
          cd work
          echo "[]" > files_to_upload.json
          blacklist_condition=""
          IFS=',' read -ra TAGS <<< "$BLACKLIST_TAGS"
          for tag in "${TAGS[@]}"; do
            if [ -n "$blacklist_condition" ]; then
              blacklist_condition="$blacklist_condition and "
            fi
            blacklist_condition="${blacklist_condition}.tag_name != \"$tag\""
          done
          echo "Using blacklist condition: $blacklist_condition"
          cat ../releases.json | jq -r "
            .[] | 
            select($blacklist_condition) |
            .assets[] | 
            select(.name | test(\"^[a-zA-Z0-9]+_[a-zA-Z0-9.\\\\-]+_[a-zA-Z0-9.\\\\-]+_[a-zA-Z0-9_\\\\-]+_[a-zA-Z0-9_\\\\-]+\\\\.zip$\")) |
            @base64
          " > assets_to_process.txt
          existing_assets=$(gh release view processed --json assets --jq .assets)
          while IFS= read -r encoded_asset; do
            if [ -z "$encoded_asset" ]; then
              continue
            fi
            asset=$(echo "$encoded_asset" | base64 -d)
            name=$(echo "$asset" | jq -r '.name')
            url=$(echo "$asset" | jq -r '.browser_download_url')
            echo "Processing $name"
            if [[ "$name" =~ ^([a-zA-Z0-9]+)_([a-zA-Z0-9.\-]+)_([a-zA-Z0-9.\-]+)_([a-zA-Z0-9_\-]+)_([a-zA-Z0-9_\-]+)\.zip$ ]]; then
              os="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              codename="${BASH_REMATCH[3]}"
              arch="${BASH_REMATCH[4]}"
              variant="${BASH_REMATCH[5]}"
              case "$arch" in
                x86_64) std_arch="amd64" ;;
                aarch64) std_arch="arm64" ;;
                *) std_arch="$arch" ;;
              esac
              rootfs_file="${os}-${version}-${std_arch}-${variant}-rootfs.squashfs"
              incus_file="${os}-${version}-${std_arch}-${variant}-incus.tar.xz"
              if echo "$existing_assets" | jq -r '.[].name' | grep -q "^$rootfs_file$"; then
                echo "Deleting existing $rootfs_file..."
                gh release delete-asset processed "$rootfs_file" --yes || true
                sleep 2
              fi
              if echo "$existing_assets" | jq -r '.[].name' | grep -q "^$incus_file$"; then
                echo "Deleting existing $incus_file..."
                gh release delete-asset processed "$incus_file" --yes || true
                sleep 2
              fi
              jq --arg name "$name" \
                 --arg url "$url" \
                 --arg os "$os" \
                 --arg version "$version" \
                 --arg arch "$arch" \
                 --arg std_arch "$std_arch" \
                 --arg variant "$variant" \
                 --arg rootfs_file "$rootfs_file" \
                 --arg incus_file "$incus_file" \
                 '. += [{
                   name: $name,
                   url: $url,
                   os: $os,
                   version: $version,
                   arch: $arch,
                   std_arch: $std_arch,
                   variant: $variant,
                   rootfs_file: $rootfs_file,
                   incus_file: $incus_file
                 }]' files_to_upload.json > files_to_upload_temp.json
              mv files_to_upload_temp.json files_to_upload.json
            fi
          done < assets_to_process.txt
          mv files_to_upload.json /tmp/files_to_upload.json

      - name: 等待API同步
        run: |
          echo "Waiting for GitHub API to sync after deletions..."
          sleep 120

      - name: 处理并上传解压文件
        env:
          PROCESSED_RELEASE_ID: ${{ steps.get_processed_release.outputs.release_id }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          mkdir -p work
          cd work
          echo "[]" > processed_assets.json
          echo "Available disk space:"
          df -h /
          jq -r '.[] | @base64' /tmp/files_to_upload.json | while IFS= read -r encoded_file; do
            if [ -z "$encoded_file" ]; then
              continue
            fi
            file_info=$(echo "$encoded_file" | base64 -d)
            name=$(echo "$file_info" | jq -r '.name')
            url=$(echo "$file_info" | jq -r '.url')
            os=$(echo "$file_info" | jq -r '.os')
            version=$(echo "$file_info" | jq -r '.version')
            arch=$(echo "$file_info" | jq -r '.arch')
            std_arch=$(echo "$file_info" | jq -r '.std_arch')
            variant=$(echo "$file_info" | jq -r '.variant')
            rootfs_file=$(echo "$file_info" | jq -r '.rootfs_file')
            incus_file=$(echo "$file_info" | jq -r '.incus_file')
            temp_dir="temp_${os}_${version}_${arch}_${variant}_$$"
            mkdir -p "$temp_dir"
            cd "$temp_dir"
            echo "Downloading $name..."
            if curl -L --max-filesize 2147483648 -o image.zip "$url"; then  # 2GB 限制
              file_size=$(stat -c%s image.zip)
              echo "Downloaded file size: $(numfmt --to=iec-i --suffix=B $file_size)"
              available_space=$(df --output=avail / | tail -1)
              needed_space=$((file_size * 3))
              if [ $available_space -lt $needed_space ]; then
                echo "Insufficient disk space for $name, skipping..."
                cd ..
                rm -rf "$temp_dir"
                continue
              fi
              if unzip -q image.zip; then
                rm image.zip
                if [ -f rootfs.squashfs ] && [ -f incus.tar.xz ]; then
                  mv rootfs.squashfs "$rootfs_file"
                  mv incus.tar.xz "$incus_file"
                  rootfs_size=$(stat -c%s "$rootfs_file")
                  incus_size=$(stat -c%s "$incus_file")
                  rootfs_sha256=$(sha256sum "$rootfs_file" | cut -d' ' -f1)
                  incus_sha256=$(sha256sum "$incus_file" | cut -d' ' -f1)
                  combined_sha256=$(echo -n "${rootfs_sha256}${incus_sha256}" | sha256sum | cut -d' ' -f1)
                  echo "File sizes - rootfs: $(numfmt --to=iec-i --suffix=B $rootfs_size), incus: $(numfmt --to=iec-i --suffix=B $incus_size)"
                  upload_success=true
                  echo "Uploading $rootfs_file..."
                  if ! gh release upload processed "$rootfs_file" --clobber; then
                    echo "Failed to upload $rootfs_file"
                    upload_success=false
                  fi
                  echo "Uploading $incus_file..."
                  if ! gh release upload processed "$incus_file" --clobber; then
                    echo "Failed to upload $incus_file"
                    upload_success=false
                  fi
                  if [ "$upload_success" = true ]; then
                    sleep 5
                    assets_json=$(gh release view processed --json assets --jq .assets)
                    rootfs_url=$(echo "$assets_json" | jq -r --arg name "$rootfs_file" '.[] | select(.name == $name) | .browser_download_url // empty')
                    incus_url=$(echo "$assets_json" | jq -r --arg name "$incus_file" '.[] | select(.name == $name) | .browser_download_url // empty')
                    if [ -n "$rootfs_url" ] && [ -n "$incus_url" ]; then
                      echo "Successfully uploaded both files for $name"
                      jq --arg os "$os" \
                         --arg version "$version" \
                         --arg arch "$arch" \
                         --arg std_arch "$std_arch" \
                         --arg variant "$variant" \
                         --arg rootfs_url "$rootfs_url" \
                         --arg incus_url "$incus_url" \
                         --arg rootfs_size "$rootfs_size" \
                         --arg incus_size "$incus_size" \
                         --arg rootfs_sha256 "$rootfs_sha256" \
                         --arg incus_sha256 "$incus_sha256" \
                         --arg combined_sha256 "$combined_sha256" \
                         '. += [{
                           os: $os,
                           version: $version,
                           arch: $arch,
                           std_arch: $std_arch,
                           variant: $variant,
                           rootfs_url: $rootfs_url,
                           incus_url: $incus_url,
                           rootfs_size: ($rootfs_size | tonumber),
                           incus_size: ($incus_size | tonumber),
                           rootfs_sha256: $rootfs_sha256,
                           incus_sha256: $incus_sha256,
                           combined_sha256: $combined_sha256
                         }]' ../processed_assets.json > ../processed_assets_temp.json
                      mv ../processed_assets_temp.json ../processed_assets.json
                    else
                      echo "Failed to get download URLs for $name"
                    fi
                  else
                    echo "Upload failed for $name"
                  fi
                else
                  echo "Missing required files in $name"
                fi
              else
                echo "Failed to extract $name"
                rm -f image.zip
              fi
            else
              echo "Failed to download $name"
            fi
            cd ..
            rm -rf "$temp_dir"
            echo "Remaining disk space:"
            df -h / | tail -1
            sync
            echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true
          done
          mv processed_assets.json /tmp/processed_assets.json || true
          if [ -f /tmp/processed_assets.json ]; then
            processed_count=$(jq length /tmp/processed_assets.json)
            echo "Successfully processed $processed_count assets"
          else
            echo "No assets were processed successfully"
          fi
