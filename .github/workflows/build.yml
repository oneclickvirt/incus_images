name: Multi-Distro Images Builder

on:
  schedule:
    - cron: "0 14 * * *"
  workflow_dispatch:

jobs:
  build-images:
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        distro:
          [
            "debian",
            "kali",
            "centos",
            "almalinux",
            "rockylinux",
            # "fedora", # 编译无效
            # "centos", # 编译无效
            "opensuse",
            "alpine",
            "archlinux",
            "gentoo",
            "openwrt",
            "oracle",
            "ubuntu",
          ]
        arch:
          - name: amd64
            runner: ubuntu-latest
          - name: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.arch.runner }}
    timeout-minutes: 200

    steps:
      - uses: actions/checkout@v4

      - name: Check workspace
        run: pwd

      - name: Build environment
        run: |
          sudo apt update -y
          sudo apt install -y polkit || sudo apt install -y policykit-1
          sudo apt install -y jq

      - name: Configure Git Identity
        run: |
          git config --global user.name "daily-update"
          git config --global user.email "tg@spiritlhl.top"

      - name: Build and Upload Images
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          DISTRO="${{ matrix.distro }}"
          ARCH="${{ matrix.arch.name }}"
          echo "Processing $DISTRO for $ARCH architecture"
          echo "---zip_name_list---"
          output=$(bash build_images.sh $DISTRO false $ARCH | tail -n 1)
          zip_name_list=($output)
          echo "---zip_name_list---"
          for item in "${zip_name_list[@]}"; do
            echo "$item"
          done
          echo "-------"
          release_response=$(curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/oneclickvirt/incus_images/releases/tags/$DISTRO" || true)
          if [ "$(jq -r '.id' <<< "$release_response")" == "null" ]; then
            echo "Creating new release for $DISTRO"
            release_response=$(curl -sS -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"tag_name":"'"$DISTRO"'", "name":"'"$DISTRO Images"'", "generate_release_notes":true}' \
              "https://api.github.com/repos/oneclickvirt/incus_images/releases" || true)
          fi
          release_id=$(jq -r '.id' <<< "$release_response")
          echo "Building $DISTRO and packaging zips for $ARCH"
          sudo bash build_images.sh $DISTRO true $ARCH || true
          echo "------------"
          pwd
          ls
          echo "------------"

          upload_large_file() {
            local file="$1"
            local asset_name="$2"
            local file_size=$(stat -c %s "$file")
            local chunk_size=$((50 * 1024 * 1024))
            local total_chunks=$(( (file_size + chunk_size - 1) / chunk_size ))
            
            echo "Starting chunked upload for $asset_name (size: $(numfmt --to=iec-i --suffix=B $file_size), chunks: $total_chunks)"
            
            upload_url=$(curl -sS -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"name\":\"$asset_name\"}" \
              "https://api.github.com/repos/oneclickvirt/incus_images/releases/$release_id/assets" \
              | jq -r '.upload_url' | sed 's/{?name,label}//')
            
            if [ "$upload_url" = "null" ] || [ -z "$upload_url" ]; then
              echo "Failed to get upload URL"
              return 1
            fi
            
            for ((i=0; i<total_chunks; i++)); do
              local start=$((i * chunk_size))
              local end=$((start + chunk_size - 1))
              if [ $end -ge $file_size ]; then
                end=$((file_size - 1))
              fi
              local current_chunk_size=$((end - start + 1))
              
              echo "Uploading chunk $((i+1))/$total_chunks (bytes $start-$end)"
              
              dd if="$file" bs=1 skip=$start count=$current_chunk_size 2>/dev/null | \
              curl -sS -X PUT \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Content-Type: application/zip" \
                -H "Content-Range: bytes $start-$end/$file_size" \
                --data-binary @- \
                "$upload_url?name=$asset_name" || return 1
            done
            
            echo "Upload completed for $asset_name"
            return 0
          }

          for file in "${zip_name_list[@]}"; do
            if [ -f "$file" ] && [ $(stat -c %s "$file") -gt 10485760 ]; then
              echo "Processing $file (size: $(numfmt --to=iec-i --suffix=B $(stat -c %s "$file")))"
              asset_name=$(basename "$file")
              existing_asset=$(curl -sS -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/oneclickvirt/incus_images/releases/$release_id/assets" \
                | jq -r --arg name "$asset_name" '.[] | select(.name == $name)')
              if [ -n "$existing_asset" ]; then
                asset_id=$(jq -r '.id' <<< "$existing_asset")
                echo "Removing existing asset ID $asset_id"
                curl -sS -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
                  "https://api.github.com/repos/oneclickvirt/incus_images/releases/assets/$asset_id" || true
              fi
              
              file_size=$(stat -c %s "$file")
              if [ $file_size -gt $((100 * 1024 * 1024)) ]; then
                upload_large_file "$file" "$asset_name" || echo "Chunked upload failed for $file"
              else
                echo "Uploading $asset_name..."
                curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "Content-Type: application/zip" \
                  --data-binary @"$file" \
                  "https://uploads.github.com/repos/oneclickvirt/incus_images/releases/$release_id/assets?name=$asset_name" || true
              fi
              sudo rm -vf "$file"
            else
              echo "Skipping $file - does not exist or size <10MB"
              [ -f "$file" ] && rm -vf "$file"
            fi
          done
        continue-on-error: true
