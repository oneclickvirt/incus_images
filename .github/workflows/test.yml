name: Test Incus Images

on:
  schedule:
    - cron: '0 4 2-30/2 * *'
  workflow_dispatch:

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          # 下载两个平台的镜像列表
          curl -o x86_64_all_images.txt https://raw.githubusercontent.com/oneclickvirt/incus_images/main/x86_64_all_images.txt
          curl -o arm64_all_images.txt https://raw.githubusercontent.com/oneclickvirt/incus_images/main/arm64_all_images.txt
          
          echo "构建测试矩阵..."
          matrix_json="{\"include\":["
          
          while IFS= read -r image; do
            if [[ -n "$image" ]]; then
              matrix_json+="{\"image\":\"$image\",\"arch\":\"amd64\",\"runner\":\"ubuntu-latest\"},"
            fi
          done < x86_64_all_images.txt
          
          while IFS= read -r image; do
            if [[ -n "$image" ]]; then
              matrix_json+="{\"image\":\"$image\",\"arch\":\"arm64\",\"runner\":\"ubuntu-24.04-arm\"},"
            fi
          done < arm64_all_images.txt
          
          # 去掉最后一个逗号
          matrix_json=${matrix_json%,}
          matrix_json+="]}"
          
          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"

  test-single-image:
    needs: prepare-matrix
    name: test-${{ matrix.image }}
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v4
      - name: Setup Fresh Environment
        run: |
          echo "设置新环境..."
          sudo apt-get update -y
          sudo sh -c 'export DEBIAN_FRONTEND=noninteractive && curl -L https://raw.githubusercontent.com/oneclickvirt/incus/main/scripts/incus_install.sh -o incus_install.sh && chmod +x incus_install.sh && bash incus_install.sh'
      - name: Configure Git
        run: |
          git config --global user.name "daily-test"
          git config --global user.email "test@spiritlhl.top"
      - name: Test Image
        id: test
        continue-on-error: true
        run: |
          echo "测试镜像: ${{ matrix.image }}"
          # 备份 DNS 配置
          sudo cp /etc/resolv.conf /etc/resolv.conf.backup || true
          
          if sudo bash test.sh "${{ matrix.image }}"; then
            echo "测试通过: ${{ matrix.image }}"
            # 创建结果目录和文件
            mkdir -p test-results
            echo "{\"success\":true,\"image\":\"${{ matrix.image }}\",\"arch\":\"${{ matrix.arch }}\"}" > "test-results/result.json"
          else
            echo "测试失败: ${{ matrix.image }}"
            mkdir -p test-results
            echo "{\"success\":false,\"image\":\"${{ matrix.image }}\",\"arch\":\"${{ matrix.arch }}\"}" > "test-results/result.json"
            exit 1
          fi
          # 还原 DNS 配置
          sudo mv /etc/resolv.conf.backup /etc/resolv.conf || true
      
      - name: Upload Test Result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-result-${{ matrix.image }}
          path: test-results/result.json

  collect-single-image:
    needs: [prepare-matrix, test-single-image]
    name: collect-${{ matrix.image }}
    if: always()
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Download Test Result
        uses: actions/download-artifact@v3
        with:
          name: test-result-${{ matrix.image }}
          path: ./test-results
      
      - name: Process Test Result
        id: process
        run: |
          if [ -f "./test-results/result.json" ]; then
            # 检查测试是否成功
            if grep -q '"success":true' "./test-results/result.json"; then
              # 创建收集结果目录
              mkdir -p collect-results
              # 复制测试结果到收集结果
              cp "./test-results/result.json" "./collect-results/result.json"
              echo "收集成功的测试结果：${{ matrix.image }}"
            else
              echo "跳过失败的测试结果：${{ matrix.image }}"
              exit 0
            fi
          else
            echo "找不到测试结果文件"
            exit 0
          fi
      
      - name: Upload Collected Result
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: collected-result-${{ matrix.image }}
          path: collect-results/result.json

  results-updater:
    needs: collect-single-image
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download All Collected Results
        uses: actions/download-artifact@v3
        with:
          path: ./collected-results
      
      - name: Aggregate Test Results
        run: |
          # 初始化结果文件
          > x86_64_fixed_images.txt
          > arm64_fixed_images.txt
          
          echo "聚合各分支测试结果..."
          for result_file in $(find ./collected-results -type f -name "result.json"); do
            echo "处理文件: $result_file"
            
            # 解析 JSON 文件
            if [ -x "$(command -v jq)" ]; then
              # 使用 jq 解析（如果可用）
              success=$(jq -r '.success' "$result_file")
              image=$(jq -r '.image' "$result_file")
              arch=$(jq -r '.arch' "$result_file")
            else
              # 降级使用 grep 和 sed
              success=$(grep -o '"success":\(true\|false\)' "$result_file" | sed 's/"success"://')
              image=$(grep -o '"image":"[^"]*"' "$result_file" | sed 's/"image":"//;s/"//')
              arch=$(grep -o '"arch":"[^"]*"' "$result_file" | sed 's/"arch":"//;s/"//')
            fi
            
            echo "结果: success=$success, image=$image, arch=$arch"
            
            if [ "$success" = "true" ]; then
              if [ "$arch" = "amd64" ]; then
                echo "$image" >> x86_64_fixed_images.txt
              elif [ "$arch" = "arm64" ]; then
                echo "$image" >> arm64_fixed_images.txt
              fi
            fi
          done
          
          echo "排序去重..."
          sort -u x86_64_fixed_images.txt -o x86_64_fixed_images.txt
          sort -u arm64_fixed_images.txt -o arm64_fixed_images.txt
          
          echo "最终结果："
          echo "成功的 x86_64 镜像："
          cat x86_64_fixed_images.txt
          echo "成功的 arm64 镜像："
          cat arm64_fixed_images.txt

  cleanup:
    needs: results-updater
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup
        run: |
          echo "所有测试完成。请查看 Actions 页面获取详细测试结果。"
